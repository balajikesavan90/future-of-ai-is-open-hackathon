import streamlit as st

from widgets.uploader import render_uploader
from widgets.data_dictionary import render_data_dictionary_widget
from widgets.uploaded_data import render_uploaded_data
from utils.ai_helpers import welcome_message, generate_arctic_response, extract_python_syntax
from utils.python_helpers import is_json
import json
import pandas as pd

def setup_home():
    if 'vetted_files' not in st.session_state.keys():
        st.session_state['vetted_files'] = {}
    
    if 'data_dictionaries_loaded' not in st.session_state.keys():
        st.session_state['data_dictionaries_loaded'] = False    
    
    if 'datasets_vetted' not in st.session_state.keys():
        st.session_state['datasets_vetted'] = False

def render_home():
    st.title(':blue[Auto Analytics]')
    st.divider()

    if st.session_state['vetted_files'] == {}:
        render_uploader()

    else:
        if not st.session_state['data_dictionaries_loaded']:
            render_data_dictionary_widget()

        else:
            if not st.session_state['datasets_vetted']:
                render_uploaded_data()
            else:
                st.success(':green[Auto Analytics AI now has access to your metadata of the files you uploaded.]')
                st.info(':blue[The code generated by the AI will be executed in a sandbox environment. The results will be displayed here.]')
                if 'messages' not in st.session_state.keys() or not st.session_state['messages']:
                    st.session_state['messages'] = [{'role': 'assistant', 'content': welcome_message}]   

                # Display or clear chat messages
                for message in st.session_state['messages']:
                    with st.chat_message(message['role']):
                        st.write(message['content'])

                if user_input := st.chat_input():
                    st.session_state['messages'].append({'role': 'user', 'content': user_input})
                    with st.chat_message('user'):
                        st.write(user_input)

                # Generate a new response if last message is not from assistant
                if st.session_state['messages'][-1]['role'] != 'assistant':
                    with st.chat_message('assistant'):
                        response = generate_arctic_response()
                        try:
                            response_dict = json.loads(response)
                            python_syntax = response_dict['python_syntax']
                        except json.JSONDecodeError as e:
                            python_syntax = extract_python_syntax(response)
                        
                        for filename in st.session_state['vetted_files']:
                            python_syntax = python_syntax.replace(f'{filename}', f"st.session_state['vetted_files']['{filename}']['dataframe']")
                        python_syntax += '\n\nst.write(generate_report())'
                        st.write(python_syntax)
                        exec(python_syntax)
                    message = {'role': 'assistant', 'content': response}
                    st.session_state['messages'].append(message)